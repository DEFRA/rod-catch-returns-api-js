name: build

on:
  pull_request:
    branches:
      - develop
      - main
  push:
    branches:
      - develop
      - main

env:
  REPOSITORY: rod_catch_returns/api_js

jobs:
  tests:
    name: tests
    runs-on: ubuntu-latest
    env:
      TZ: Europe/London
    services:
      postgres:
        image: postgres:15.2
        env:
          POSTGRES_DB: rcr_api
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm ci
      - name: Create .env file
        run: |
          echo -e "PORT=5000\n\
            DATABASE_HOST=localhost\n\
            DATABASE_NAME=rcr_api\n\
            DATABASE_USERNAME=postgres\n\
            DATABASE_PASSWORD=password\n\
            DATABASE_PORT=5432\n\
            OAUTH_CLIENT_ID=client_id\n\
            OAUTH_CLIENT_SECRET=client_secret\n\
            OAUTH_AUTHORITY_HOST_URL=https://auth.url\n\
            OAUTH_TENANT=tenant_id\n\
            OAUTH_SCOPE=scope\n\
            DYNAMICS_API_PATH=/api/path\n\
            DYNAMICS_API_VERSION=v9.0\n\
            OIDC_WELL_KNOWN_URL=http://wellknown.url\n\
            BASE_URL=http://localhost:5000" > .env
      - name: Run migrations
        run: npm run migrate:build && npm run migrate:up
      - name: Run tests
        run: npm run test:coverage
      - name: SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  new-version:
    name: new-version
    runs-on: ubuntu-latest
    needs: tests
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm ci
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Run versioning script
        run: . ./scripts/github/deploy.sh
        env:
          GITHUB_AUTH: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          BRANCH: ${{ steps.extract_branch.outputs.branch }}
          HUSKY: 0

  push-ecr:
    needs: new-version
    name: push-ecr
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Shallow clones block `git describe --always --tags` from working later in 'Set all tags'
          fetch-depth: 0
      # Configure our AWS credentials and region environment variables for use in other GitHub Actions
      # https://github.com/aws-actions/configure-aws-credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_ENV_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ENV_ACCOUNT }}:role/${{ secrets.AWS_ENV_ROLE }}
      # Login to AWS ECR private. It will use the credentials we configured in the previous step
      # https://github.com/aws-actions/amazon-ecr-login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Configure git version sorting
        run: |
          git config --global --unset-all versionsort.suffix || echo "No existing versionsort.suffix found in git configuration."
          git config --global --add versionsort.suffix -beta.
          git config --global --add versionsort.suffix -rc.
      - name: Generate raw tag
        id: raw-tag
        run: echo "raw_tag=$(git tag --list --sort=version:refname | egrep '^v[0-9]*\.[0-9]*\.[0-9]*(-rc\.[0-9]*)?$' | tail -1)" >> $GITHUB_OUTPUT
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=false
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}
          tags: |
            type=semver,priority=900,pattern={{raw}}
            type=raw,priority=800,value=${{ steps.raw-tag.outputs.raw_tag }}
          labels: |
            org.opencontainers.image.licenses=OGL-UK-3.0
      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: production
          build-args: |
            GIT_COMMIT=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
      # Generate a summary that will be displayed against the Job when selected in the Actions tab.
      # We do this to quickly see details for the image generated instead of digging into the build output.
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary
      - name: Generate job summary
        id: summary
        run: |
          {
            echo "### Docker Image details"
            echo "The tag is **${{ steps.raw-tag.outputs.raw_tag }}**"
            echo "| Label      | Value |"
            echo "| ---------- | ----- |"
            echo "| created    | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }} |"
            echo "| description| ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }} |"
            echo "| licenses   | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.licenses'] }} |"
            echo "| revision   | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }} |"
            echo "| source     | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.source'] }} |"
            echo "| title      | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.title'] }} |"
            echo "| url        | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.url'] }} |"
            echo "| version    | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }} |"
          } >> $GITHUB_STEP_SUMMARY
